/* Copyright 2023 Carlos A. (https://github.com/dealfonso); License: https://opensource.org/license/mit/ */
(function(t){if(typeof t==="undefined"){var t={}}const n="1.0.2";const a={target:null,targetChildren:null,multiple:true,joinText:"\n",images:true,value:null,suppressWarnings:true,debug:false};function i(e){let t=e.split("-").map(e=>e.charAt(0).toUpperCase()+e.slice(1)).join("");return t.charAt(0).toLowerCase()+t.slice(1)}function c(t,o={},r=""){if(r!=""){r=r+"-"}let n={};for(const a in o){let e=i(`${r}${a}`);if(e in t.dataset){n[a]=t.dataset[e]}else{n[a]=o[a]}}return n}function f(e){if(!!e===e){return e}if(+e===e){if(e==0)return false;return true}if(""+e===e){return e.toLowerCase()==="true"}return!!e}async function u(e){try{await navigator.clipboard.writeText(e)}catch(e){console.error("Failed to copy text to clipboard:",e)}}async function p(t){async function o(e,t=false){async function r(e){const r=document.createElement("canvas");const t=r.getContext("2d");r.width=e.naturalWidth||e.width;r.height=e.naturalHeight||e.height;t.drawImage(e,0,0);return new Promise((t,o)=>{r.toBlob(e=>{r.remove();if(e){t(e)}else{o(new Error("Failed to create blob from canvas"))}},"image/png")})}if(typeof e==="string"){let o=new Image;o.crossOrigin="anonymous";o.src=e;return new Promise((e,t)=>{o.onload=()=>r(o).then(e).catch(t);o.onerror=e=>t(new Error(`Failed to load image: ${e.message}`))})}if(!(e instanceof HTMLImageElement)){throw new Error("Provided element is not an image")}let o=e;if(t){o=new Image;o.crossOrigin="anonymous";o.src=e.src;return new Promise((e,t)=>{o.onload=()=>r(o).then(e).catch(t);o.onerror=e=>t(new Error(`Failed to load image: ${e.message}`))})}else{return r(o)}}let r=null;try{r=await o(t,false)}catch(e){console.warn("Failed to get image without cross-origin; we'll try to download it again\n",e)}try{if(!r){r=await o(t,true)}if(!r){throw new Error("Blob creation failed")}let e=new ClipboardItem({[r.type]:r});try{await navigator.clipboard.write([e])}catch(e){console.error("Failed to copy image to clipboard:",e)}}catch(e){console.error("Failed to fetch image:",e)}}function o(e,t={}){t=Object.assign({},a,t);let i=e=>e;let l=e=>e;if(!f(t.suppressWarnings)){i=(...e)=>console.warn(...e)}if(f(t.debug)){l=(...e)=>console.log(...e)}let o=[];if(typeof e==="string"){o=document.querySelectorAll(e)}else if(e instanceof HTMLElement){o=[e]}if(o.length===0){i("No elements found to make copyable:",e);return}if(o instanceof NodeList||o instanceof HTMLCollection){o=Array.from(o)}else if(!Array.isArray(o)){o=[o]}for(const s of o){let a=c(s,t,"copy");i=e=>e;if(!f(a.suppressWarnings)){i=e=>console.warn(e)}l=e=>e;if(f(a.debug)){l=(...e)=>console.log(...e)}if(!a.target&&!a.targetChildren&&!a.value){i("Nothing to copy for element:",s);continue}if(s._copyClipboard){s.removeEventListener("click",s._copyClipboard.copyHandler);delete s._copyClipboard}const r=function(){let r=[];if(a.value){if(t.images&&t.value instanceof File&&t.value.type.startsWith("image/")){let e=new ClipboardItem({[t.value.type]:t.value});navigator.clipboard.write([e]).then(()=>{l(`Image copied from file to clipboard.`)}).catch(e=>{console.error("Failed to copy image:",e)});return}else if(typeof t.value==="string"||typeof t.value==="number"){u(t.value);return}else if(t.value instanceof HTMLElement){u(t.value.innerText||t.value.textContent);return}else if(Array.isArray(t.value)){u(t.value.join("\n"));return}else{i(`Unsupported value type for copying: ${typeof t.value}. Expected string, number, HTMLElement or array.`);return}}else{let e=a.target?document.querySelectorAll(a.target):[];let t=a.targetChildren?s.querySelectorAll(a.targetChildren):[];e=[...e,...t];if(e.length===0){i(`No target elements found for selector: ${a.target} or children selector: ${a.targetChildren}.`);return}if(!f(a.multiple)){r=[e[0]];l(`Copying only the first target element: ${r[0]}`)}else{r=Array.from(e);l(`Copying all target elements: `,r)}let o=[];for(const n of r){if(f(a.images)&&n.tagName.toLowerCase()==="img"){p(n);return}else{if(n.tagName.toLowerCase()==="input"||n.tagName.toLowerCase()==="textarea"){o.push(n.value||"")}else if(n.tagName.toLowerCase()==="select"){o.push(n.options[n.selectedIndex].text||"")}else if(n.tagName.toLowerCase()==="img"){o.push(n.alt||n.title||n.src||"")}else{o.push(n.innerText||n.textContent||n.value||n.text||n.alt||"")}}}if(o.length>0){u(o.join(a.joinText))}}};s._copyClipboard={options:a,copyHandler:r,version:n};s.addEventListener("click",r)}}function r(e,t={}){const o={onPasteImage:e=>{},onPasteText:e=>{},onError:e=>console.error(e)};t=Object.assign({},o,t);let r=e.clipboardData||window.clipboardData;if(!r){if(typeof t.onError==="function"){t.onError("No clipboard data available. Please ensure you have copied something to the clipboard before pasting.")}return false}if(r.items){for(var n=0;n<r.items.length;n++){var a=r.items[n];if(a.kind==="file"&&a.type.startsWith("image/")){var i=a.getAsFile();if(!i){if(typeof t.onError==="function"){t.onError("No file found in clipboard data. Please ensure you have copied an image to the clipboard before pasting.")}return false}if(typeof t.onPasteImage==="function"){t.onPasteImage(i)}return true;break}else if(a.kind==="string"&&a.type==="text/plain"){a.getAsString(function(e){if(typeof t.onPasteText==="function"){t.onPasteText(e)}});return true;break}}}else{var l=r.getData("Text");if(l){if(typeof t.onPasteText==="function"){t.onPasteText(l)}return true}else{if(typeof t.onError==="function"){t.onError("No text data found in clipboard data. Please ensure you have copied text to the clipboard before pasting.")}return false}}}navigator.permissions.query({name:"clipboard-write"}).then(e=>{if(e.state==="granted"||e.state==="prompt"){t.copyClipboard=o}else{console.warn("Clipboard write permission is not granted. Cannot make elements copyable.");t.copyClipboard=function(){console.warn("Clipboard write permission is not granted. Cannot make elements copyable.")}}t.copyClipboard.version=n;t.copyClipboard.copyTextToClipboard=u;t.copyClipboard.copyImageToClipboard=p;t.copyClipboard.handlePaste=r});document.addEventListener("DOMContentLoaded",()=>{const e=document.querySelectorAll("[data-copy-target],[data-copy-value],[data-copy-target-children]");e.forEach(e=>{const t=c(e,a,"copy");o(e,t)})})})(window);